var exec=require("child_process").exec,log=require("npmlog"),Promise=require("bluebird"),path=require("path"),dns=Promise.promisifyAll(require("dns")),fs=Promise.promisifyAll(require("fs-extra")),git=Promise.promisifyAll(require("gift")),openUrl=require("./openurl"),promiseMaker=require("./promisemaker"),gitInstUrls={win32:"https://www.npmjs.com/package/bower#windows-users",darwin:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git#Installing-on-Mac",linux:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git#Installing-on-Linux"};
function Gitter(){}
Gitter.prototype={verifyGit:function(b){log.verbose("verifyGit()");exec("git --version",{});return dns.lookupAsync("www.github.com").then(function(){return promiseExec("git --version",{})}).then(function(){log.verbose("verifyGit()","'git' command is available on this machine.")})["catch"](function(a){log.verbose("verifyGit()#error",a);a&&"ENOTFOUND"==a.code?a=Error("Network is not available."):a&&a.exitCode&&0!==a.exitCode&&(a=Error("'git' command is not available on this machine."),b&&b.openUrl&&
openUrl(gitInstUrls[process.platform]));throw a;})},shallowClone:function(b,a,c){log.verbose("shallowClone()#git.cloneAsync() start:",b,", branch:",c);return git.cloneAsync(b,a,1,c).then(function(b){log.verbose("shallowClone()#git.cloneAsync() done in ",a);return"Success"})["catch"](function(a){throw a;})},unshallowRepo:function(b){log.verbose("unshallowRepo()","convert shallow clone to full clone at",b);var a;return Promise.resolve().then(function(){a='git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"';
log.verbose("unshallowRepo()#cmd:",a,"at",b);return promiseExec(a,{cwd:b})}).then(function(){a="git fetch origin";log.verbose("unshallowRepo()#cmd:",a,"at",b);return promiseExec(a,{cwd:b})}).then(function(){log.verbose("unshallowRepo() done")})["catch"](function(b){b.hasOwnProperty("exitCode")&&log.warn("unshallowRepo()#cmd:",a,", exitCode:",b.exitCode);throw b;})},checkoutRepo:function(b,a){log.verbose("checkoutRepo()#branch:",a,"at",b);return git.initAsync(b).then(function(b){return Promise.promisifyAll(b).checkoutAsync(a)}).then(function(){log.verbose("checkoutRepo() done.",
"at",b)})["catch"](function(c){log.error("checkoutRepo() failed at "+b+" during checking out to "+a);throw c;})}};function promiseExec(b,a){log.verbose("promiseExec()#cmd:",b);var c=exec(b,a);c.stdout.on("data",log.verbose.bind(log,"promiseExec()"));c.stderr.on("data",log.verbose.bind(log,"promiseExec()"));return promiseMaker(c)}module.exports=Gitter;
